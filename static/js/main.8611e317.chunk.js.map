{"version":3,"sources":["gameHelpers.ts","components/styles/StyledTetris.ts","components/styles/StyledSpeedBox.ts","tetrominos.ts","hooks/useStage.ts","components/styles/StyledStage.ts","components/styles/StyledCell.ts","components/Cell.tsx","components/Stage.tsx","components/styles/StyledStartButton.ts","components/StartButton.tsx","components/styles/StyledDisplay.ts","components/Display.tsx","components/NextElement.tsx","components/Tetris.tsx","hooks/usePlayer.ts","hooks/useGameStatus.ts","hooks/useInterval.ts","App.tsx","serviceWorker.ts","index.tsx","img/bg.png"],"names":["createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","StyledTetrisWrapper","styled","div","bgImage","StyledTetris","StyledSpeedBox","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","map","row","cell","forEach","value","collided","reduce","ack","findIndex","prev","unshift","push","sweepRows","StyledStage","props","height","width","StyledStageNewElement","StyledCell","type","StyledEmptyCell","React","memo","isNewElement","Stage","key","StyledStartButton","button","StartGame","callback","text","disabled","onClick","onMouseDown","e","preventDefault","StyledDisplay","gameOver","Display","NextElement","nextElement","Tetris","dropTime","setDropTime","setGameOver","gameBreak","setGameBreak","gameStarted","setGameStart","speed","setSpeed","nextTetromino","setPlayer","rotate","matrix","dir","rotatedTetro","_","index","col","reverse","useCallback","STAGE_WIDTH","clonedPlayer","offset","usePlayer","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","movePlayer","startGame","console","log","calculateSpeed","increase","getSpeedTime","drop","keyEventListener","keyCode","breakGame","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","onKeyUp","keyUp","StartButton","className","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.8611e317.chunk.js","sourcesContent":["import { IPlayer } from \"./models/models\";\r\n\r\nexport const STAGE_WIDTH: number = 12;\r\nexport const STAGE_HEIGHT: number = 20;\r\n\r\nexport const createStage = (): any => {\r\n    return Array.from(Array<any>(STAGE_HEIGHT), () =>\r\n        new Array<[number, string]>(STAGE_WIDTH).fill([0, 'clear'])\r\n    );\r\n}\r\n\r\nexport const checkCollision = (player: IPlayer, stage, { x: moveX, y: moveY }) => {\r\n    for (let y = 0; y < player.tetromino.length; y++) {\r\n        for (let x = 0; x < player.tetromino[y].length; x++) {\r\n\r\n            // 1. Check if we are on actual Tetromino cell\r\n\r\n            if (player.tetromino[y][x] !== 0) {\r\n                if (\r\n                    // 2. Check that our move inside the game areas height(y)\r\n                    // We shouldn't go through the botto, of the play area\r\n                    !stage[y + player.pos.y + moveY] ||\r\n                    // 3. Check that our move is inside the game areas width (x)\r\n                    !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n                    // 4. Check that cell wer'e moving to isn't set to clear\r\n                    stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !== 'clear'\r\n                ) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n}","import styled from 'styled-components';\r\n\r\nimport bgImage from '../../img/bg.png';\r\n\r\nexport const StyledTetrisWrapper = styled.div`\r\n    width: 100vw;\r\n    height: 100vh;\r\n    background: url(${bgImage}) #000;\r\n    background-size: cover;\r\n    overflow: hidden;\r\n    color: #fff;\r\n    font-family: Pixel, Arial, Helvetica, sans-serif;\r\n`\r\n\r\nexport const StyledTetris = styled.div`\r\n    display: flex;\r\n    align-items: flex-start;\r\n    padding: 40px;\r\n    margin: 0 auto;\r\n    max-width: 1200px;\r\n    justify-content: center;\r\n    height: calc(100vh - 50px);\r\n\r\n    aside {\r\n        width: 100%;\r\n        max-width: 250px;\r\n        display: block;\r\n        padding: 0 20px;\r\n    }\r\n\r\n    .hint {\r\n        margin: 0 10px;\r\n        color: white;\r\n        font-size: 0.75rem;\r\n        font-family: Pixel, Arial, Helvetica, sans-serif;\r\n        line-height: 1.75;\r\n        align-self: flex-end;\r\n    }\r\n`","import styled from 'styled-components';\r\n\r\n\r\nexport const StyledSpeedBox = styled.div`\r\n    margin: 15px 0;\r\n    padding: 10px;\r\n    border: 1px dashed grey;\r\n\r\n    div { \r\n        display: flex;\r\n        justify-content: space-between;\r\n    }\r\n\r\n    button {\r\n        outline: none;\r\n        box-sizing: border-box;\r\n        padding: 15px;\r\n        margin: 10px;\r\n        border-radius: 5px;\r\n        border: none;\r\n        color: white;\r\n        background: #333;\r\n        font-size: 1rem;\r\n        outline: none;\r\n        cursor: pointer;\r\n    }\r\n`","\r\nexport const TETROMINOS = {\r\n    0: { shape: [[0]], color: '0, 0, 0' },\r\n    I: {\r\n        shape: [\r\n            [0, 'I', 0, 0],\r\n            [0, 'I', 0, 0],\r\n            [0, 'I', 0, 0],\r\n            [0, 'I', 0, 0]\r\n        ],\r\n        color: '80, 227, 230',\r\n    },\r\n    J: {\r\n        shape: [\r\n            [0, 'J', 0],\r\n            [0, 'J', 0],\r\n            ['J', 'J', 0]\r\n        ],\r\n        color: '36, 95, 223',\r\n    },\r\n    L: {\r\n        shape: [\r\n            [0, 'L', 0],\r\n            [0, 'L', 0],\r\n            [0, 'L', 'L']\r\n        ],\r\n        color: '223, 173, 36',\r\n    },\r\n    O: {\r\n        shape: [\r\n            ['O', 'O'],\r\n            ['O', 'O'],\r\n        ],\r\n        color: '223, 217, 36',\r\n    },\r\n    S: {\r\n        shape: [\r\n            [0, 'S', 'S'],\r\n            ['S', 'S', 0],\r\n            [0, 0, 0]\r\n        ],\r\n        color: '48, 211, 56',\r\n    },\r\n    T: {\r\n        shape: [\r\n            [0, 0, 0],\r\n            ['T', 'T', 'T'],\r\n            [0, 'T', 0]\r\n        ],\r\n        color: '132, 61, 198',\r\n    },\r\n    Z: {\r\n        shape: [\r\n            ['Z', 'Z', 0],\r\n            [0, 'Z', 'Z'],\r\n            [0, 0, 0]\r\n        ],\r\n        color: '227, 78, 78',\r\n    },\r\n}\r\n\r\nexport const randomTetromino = () => {\r\n    const tetrominos = 'IJLOSTZ';\r\n    const randTetromino = tetrominos[Math.floor(Math.random() * tetrominos.length)];\r\n    return TETROMINOS[randTetromino];\r\n}","import { useState, useEffect } from 'react';\r\nimport { createStage } from '../gameHelpers';\r\nimport { IPlayer } from '../models/models';\r\n\r\nexport const useStage = (player: IPlayer, resetPlayer) => {\r\n    const [stage, setStage] = useState(createStage());\r\n    const [rowsCleared, setRowsCleared] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setRowsCleared(0);\r\n\r\n        const sweepRows = newStage =>\r\n            newStage.reduce((ack, row: any[]) => {\r\n                if (row.findIndex(cell => cell[0] === 0) === -1) {\r\n                    setRowsCleared(prev => prev + 1);\r\n                    ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\r\n                    return ack;\r\n                }\r\n                ack.push(row);\r\n                return ack;\r\n            }, []);\r\n\r\n        const updateStage = prevStage => {\r\n            // First flush the stage\r\n            const newStage = prevStage.map(row =>\r\n                row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell))\r\n            );\r\n\r\n            // draw the tetromino\r\n            player.tetromino.forEach((row, y) => {\r\n                row.forEach((value, x) => {\r\n                    if (value !== 0) {\r\n                        newStage[y + player.pos.y][x + player.pos.x] = [\r\n                            value,\r\n                            `${player.collided ? 'merged' : 'clear'}`,\r\n                        ]\r\n                    }\r\n                })\r\n            });\r\n\r\n            // then check if we collided\r\n            if (player.collided) {\r\n                resetPlayer();\r\n                return sweepRows(newStage);\r\n            }\r\n\r\n            return newStage;\r\n        }\r\n\r\n        setStage(prev => updateStage(prev));\r\n\r\n    }, [player, resetPlayer]);\r\n\r\n    return [stage, setStage, rowsCleared];\r\n}","import styled from 'styled-components';\r\n\r\ninterface IStageProps {\r\n    width: number;\r\n    height: number\r\n}\r\n\r\nexport const StyledStage = styled.div<IStageProps>`\r\n    display: grid;\r\n    grid-template-rows: repeat(\r\n        ${props => props.height},\r\n        calc(25vw / ${props => props.width})\r\n    );\r\n    grid-template-columns: repeat(${props => props.width}, 1fr);\r\n    grid-gap: 1px;\r\n    border: 2px solid #333;\r\n    width: 100%;\r\n    max-width: 25vw;\r\n    background: #111;\r\n`\r\n\r\nexport const StyledStageNewElement = styled.div<IStageProps>`\r\n    width: calc(100px / 4 * ${props => props.width});\r\n    height: calc(100px / 4 * ${props => props.width});;\r\n    display: grid;\r\n    grid-template-rows: repeat(\r\n        ${props => props.height},\r\n        calc(100px / 4 )\r\n    );\r\n    grid-template-columns: repeat(${props => props.width}, 1fr);\r\n    grid-gap: 1px;\r\n    background: transparent;\r\n`","import styled from 'styled-components';\r\n\r\ninterface IStyledProps {\r\n    type?: string | number;\r\n    color: string;\r\n}\r\n\r\nexport const StyledCell = styled.div<IStyledProps>`\r\n  width: auto;\r\n  background: rgba(${props => props.color}, 0.8);\r\n  border: ${props => (props.type === 0 ? '0px solid' : '4px solid')};\r\n  border-bottom-color: rgba(${props => props.color}, 0.1);\r\n  border-right-color: rgba(${props => props.color}, 1);\r\n  border-top-color: rgba(${props => props.color}, 1);\r\n  border-left-color: rgba(${props => props.color}, 0.3);\r\n`\r\nexport const StyledEmptyCell = styled.div`\r\n  width: auto;\r\n`","import React from 'react';\r\nimport { StyledCell, StyledEmptyCell } from './styles/StyledCell';\r\nimport { TETROMINOS } from '../tetrominos';\r\n\r\nconst Cell = ({ type, isNewElement = false }: { type: any, isNewElement?: boolean }) =>\r\n    (\r\n        isNewElement && !type ?\r\n            <StyledEmptyCell /> :\r\n            <StyledCell type={type} color={TETROMINOS[type].color} />\r\n    )\r\nexport default React.memo(Cell);","import React from 'react';\r\n\r\nimport { StyledStage } from './styles/StyledStage';\r\n\r\nimport Cell from './Cell';\r\n\r\nconst Stage = ({ stage }) => (\r\n    <StyledStage width={stage[0].length} height={stage.length}>\r\n        {stage.map((row: Array<any>) =>\r\n            row.map((cell, x) => (\r\n                <Cell key={x} type={cell[0]} />\r\n            )))}\r\n    </StyledStage>\r\n)\r\nexport default Stage;","import styled from 'styled-components';\r\n\r\nexport const StyledStartButton = styled.button`\r\n    box-sizing: border-box;\r\n    padding: 20px;\r\n    margin: 10px 0;\r\n    min-height: 30px;\r\n    width: 100%;\r\n    border-radius: 20px;\r\n    border: none;\r\n    color: white;\r\n    background: #333;\r\n    font-family: Pixel, Arial, Helvetica, sans-serif;\r\n    font-size: 1rem;\r\n    outline: none;\r\n    cursor: pointer;\r\n\r\n    :disabled {\r\n        background: 111;\r\n        color: #666;\r\n    }\r\n`","import React from 'react';\r\nimport { StyledStartButton } from './styles/StyledStartButton';\r\n\r\nconst StartGame = ({ callback, text, disabled = false }: { callback: any, text: string, disabled?: boolean }) => (\r\n    <StyledStartButton onClick={() => callback()}\r\n        disabled={disabled}\r\n        onMouseDown={(e) => e.preventDefault()}>\r\n        {text}\r\n    </StyledStartButton>\r\n)\r\nexport default StartGame;","import styled from 'styled-components';\r\n\r\ninterface IStyledDisplayProps {\r\n    gameOver: boolean;\r\n}\r\n\r\nexport const StyledDisplay = styled.div<IStyledDisplayProps>`\r\n    box-sizing: border-box;\r\n    display: flex;\r\n    align-items: center;\r\n    margin: 0 0 20px 0;\r\n    padding: 20px;\r\n    border: 4px solid #333;\r\n    min-height: 30px;\r\n    width: 100%;\r\n    border-radius: 20px;\r\n    color: ${props => (props.gameOver ? 'red' : '#999')};\r\n    background: #000;\r\n    font-family: Pixel,  Arial, Helvetica, sans-serif, Arial, Helvetica, sans-serif;\r\n    font-size: 0.8rem;\r\n`","import React from 'react';\r\nimport { StyledDisplay } from './styles/StyledDisplay';\r\n\r\nconst Display = ({ gameOver = false, text }: { gameOver?: boolean, text: string }) => (\r\n    <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>\r\n)\r\nexport default Display;","import React from 'react';\r\n\r\nimport { StyledStageNewElement } from './styles/StyledStage';\r\n\r\nimport Cell from './Cell';\r\n\r\nconst NextElement = ({ nextElement }) => (\r\n    <StyledStageNewElement width={nextElement[0].length} height={nextElement.length}>\r\n        {nextElement.map((row: Array<any>) =>\r\n            row.map((cell, x) => (\r\n                <Cell isNewElement={true} key={x} type={cell} />\r\n            )))}\r\n    </StyledStageNewElement>\r\n) \r\nexport default NextElement;","import React, { useState } from 'react';\r\n\r\nimport { createStage, checkCollision } from '../gameHelpers';\r\n\r\n// Styled Components\r\nimport { StyledTetris, StyledTetrisWrapper } from './styles/StyledTetris';\r\nimport { StyledSpeedBox } from './styles/StyledSpeedBox';\r\n\r\n//Custom Hooks\r\nimport { useInterval } from '../hooks/useInterval';\r\nimport { usePlayer } from '../hooks/usePlayer';\r\nimport { useStage } from '../hooks/useStage';\r\nimport { useGameStatus } from '../hooks/useGameStatus';\r\n\r\n// Components\r\nimport Stage from './Stage';\r\nimport StartButton from './StartButton';\r\nimport Display from './Display';\r\nimport NextElement from './NextElement';\r\n\r\nconst Tetris = () => {\r\n    const [dropTime, setDropTime] = useState(null);\r\n    const [gameOver, setGameOver] = useState(false);\r\n    const [gameBreak, setGameBreak] = useState(false);\r\n    const [gameStarted, setGameStart] = useState(false);\r\n    const [speed, setSpeed] = useState(1500);\r\n\r\n    const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\r\n    const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\r\n    const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowsCleared);\r\n\r\n    const movePlayer = dir => {\r\n        if (!checkCollision(player, stage, { x: dir, y: 0 })) {\r\n            updatePlayerPos({ x: dir, y: 0 });\r\n        }\r\n    }\r\n\r\n    const startGame = () => {\r\n        console.log('start game');\r\n        setStage(createStage());\r\n        resetPlayer();\r\n        setDropTime(speed);\r\n        setGameOver(false);\r\n        setGameStart(true);\r\n        setScore(0);\r\n        setRows(0);\r\n        setLevel(0);\r\n    }\r\n\r\n    const calculateSpeed = (increase: boolean) => {\r\n        let value = speed;\r\n        if (value > 500) {\r\n            value = increase ? value - 100 : value + 100;\r\n        } else if (value > 200) {\r\n            value = increase ? value - 50 : value + 50;\r\n        } else if (value > 10) {\r\n            value = increase ? value - 10 : value + 10;\r\n        }\r\n        if (value < 10) { value = 10 };\r\n        setSpeed(value);\r\n        setDropTime(getSpeedTime());\r\n    };\r\n\r\n    const getSpeedTime = () => (speed / (level + 1));\r\n\r\n\r\n    const drop = () => {\r\n        // Increase level when player has cleared 10 rows\r\n        if (rows > (level + 1) * 10) {\r\n            setLevel(prev => prev + 1);\r\n            // increase speed\r\n            setDropTime(getSpeedTime());\r\n        }\r\n\r\n        if (!checkCollision(player, stage, { x: 0, y: 1 })) {\r\n            updatePlayerPos({ x: 0, y: 1, collided: false });\r\n        } else {\r\n            // Game Over\r\n            if (player.pos.y < 1) {\r\n                console.log(\"GAME OVER!!!\");\r\n                setGameOver(true);\r\n                setDropTime(null);\r\n            }\r\n            updatePlayerPos({ x: 0, y: 0, collided: true });\r\n        }\r\n    }\r\n\r\n    const keyUp = ({ keyCode }) => {\r\n        if (!gameOver) {\r\n            if (keyCode === 40) {\r\n                setDropTime(getSpeedTime());\r\n            }\r\n        }\r\n    }\r\n\r\n    const dropPlayer = () => {\r\n        setDropTime(null);\r\n        drop();\r\n    }\r\n\r\n    const keyEventListener = ({ keyCode }) => {\r\n        if (!gameOver) {\r\n            switch (keyCode) {\r\n                // Left\r\n                case 37:\r\n                    movePlayer(-1);\r\n                    break;\r\n                // Right\r\n                case 39:\r\n                    movePlayer(1);\r\n                    break;\r\n                // Down\r\n                case 40:\r\n                    dropPlayer();\r\n                    break;\r\n                // Ctrl - rotate\r\n                // Up - rotate\r\n                case 17:\r\n                case 38:\r\n                    playerRotate(stage, 1);\r\n                    break;\r\n                // Space - pause/continue game\r\n                case 32:\r\n                    breakGame();\r\n                    break;\r\n                // Enter - start new game\r\n                case 13:\r\n                    startGame();\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    const breakGame = () => {\r\n        if (gameBreak) {\r\n            setDropTime(getSpeedTime());\r\n        } else {\r\n            setDropTime(null);\r\n        }\r\n        setGameBreak(prev => !prev);\r\n    }\r\n\r\n    useInterval(() => {\r\n        drop();\r\n    }, dropTime);\r\n\r\n    return (\r\n        <StyledTetrisWrapper role=\"button\" tabIndex={0} onKeyDown={e => keyEventListener(e)} onKeyUp={e => keyUp(e)}>\r\n            <StyledTetris>\r\n                <Stage stage={stage} />\r\n                <aside>\r\n                    {gameOver ? (\r\n                        <Display gameOver={gameOver} text=\"Game Over\"></Display>\r\n                    ) : (\r\n                            <div>\r\n                                <Display text={`Score: ${score}`} />\r\n                                <Display text={`Rows: ${rows}`} />\r\n                                <Display text={`Level: ${level}`} />\r\n                            </div>\r\n                        )}\r\n                    <StyledSpeedBox>\r\n                        <span>Speed rate: {speed}</span>\r\n                        <div>\r\n                            <button onClick={() => calculateSpeed(true)}>Increase</button>\r\n                            <button onClick={() => calculateSpeed(false)}>Decrease</button>\r\n                        </div>\r\n                    </StyledSpeedBox>\r\n\r\n                    <StartButton text={gameBreak ? \"Continue\" : \"Pause\"} callback={breakGame} disabled={!gameStarted || gameOver} />\r\n                    <StartButton text=\"Start game\" callback={startGame} />\r\n                    {gameStarted ? <NextElement nextElement={player.nextTetromino} /> : null}\r\n                </aside>\r\n                <div className=\"hint\">\r\n                    <p>Hint:</p>\r\n                    <ul>\r\n                        <li>UP&emsp;&emsp;&emsp;- rotate</li>\r\n                        <li>Ctrl &emsp;- rotate</li>\r\n                        <li>Left &emsp;- move to left</li>\r\n                        <li>Right&emsp;- move to right</li>\r\n                        <li>Down &emsp;- increase speed to down</li>\r\n                        <li>Space&emsp;- pause/continue game</li>\r\n                        <li>Enter&emsp;- start game</li>\r\n                    </ul>\r\n                </div>\r\n            </StyledTetris>\r\n        </StyledTetrisWrapper>\r\n    )\r\n}\r\nexport default Tetris;","import { useState, useCallback } from 'react';\r\n\r\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\r\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers';\r\nimport { IPlayer } from '../models/models';\r\n\r\nexport const usePlayer = (): any => {\r\n    const [player, setPlayer] = useState<IPlayer>({\r\n        pos: { x: 0, y: 0 },\r\n        tetromino: TETROMINOS[0].shape,\r\n        nextTetromino:  randomTetromino().shape,\r\n        collided: false,\r\n    });\r\n\r\n    const rotate = (matrix: Array<Array<any>>, dir: number) => {\r\n        // Make the rows become cols (transpose)\r\n        const rotatedTetro = matrix.map((_, index) =>\r\n            matrix.map(col => col[index])\r\n        );\r\n\r\n        // Reverse each row to get a rotated matrix\r\n        if (dir > 0) return rotatedTetro.map(row => row.reverse());\r\n        return rotatedTetro.reverse();\r\n\r\n    }\r\n\r\n    const playerRotate = (stage, dir) => {\r\n        const clonedPlayer = { ...player };\r\n        clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\r\n\r\n        const pos = clonedPlayer.pos.x;\r\n        let offset = 1;\r\n\r\n        while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\r\n            clonedPlayer.pos.x += offset;\r\n            offset = -(offset + (offset > 0 ? 1 : -1));\r\n            if (offset > clonedPlayer.tetromino[0].length) {\r\n                rotate(clonedPlayer.tetromino, -dir);\r\n                clonedPlayer.pos.x = pos;\r\n                return;\r\n            }\r\n        }\r\n\r\n        setPlayer(clonedPlayer);\r\n    }\r\n\r\n    const updatePlayerPos = ({ x, y, collided }: { x: number, y: number, collided: boolean }) => {\r\n        setPlayer(prev => ({\r\n            ...prev,\r\n            pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\r\n            collided,\r\n        }))\r\n    }\r\n\r\n    const resetPlayer = useCallback(() => {\r\n        setPlayer(prev => ({\r\n            pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\r\n            tetromino: prev.nextTetromino,\r\n            nextTetromino:  randomTetromino().shape,\r\n            collided: false,\r\n        }))\r\n    }, []);\r\n\r\n    return [player, updatePlayerPos, resetPlayer, playerRotate];\r\n}","import { useState, useEffect, useCallback } from 'react';\r\n\r\nexport const useGameStatus: any = rowsCleared => {\r\n    const [score, setScore] = useState<number>(0);\r\n    const [rows, setRows] = useState<number>(0);\r\n    const [level, setLevel] = useState<number>(0);\r\n\r\n    const linePoints = [40, 100, 300, 1200];\r\n\r\n    const calcScore = useCallback(() => {\r\n        // We have score\r\n        if (rowsCleared > 0) {\r\n            // This is how original Tetris score is calculated\r\n            setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\r\n            setRows(prev => prev + rowsCleared);\r\n        }\r\n    }, [level, linePoints, rowsCleared]);\r\n\r\n    useEffect(() => {\r\n        calcScore();\r\n    }, [calcScore, rowsCleared, score]);\r\n\r\n    return [score, setScore, rows, setRows, level, setLevel];\r\n\r\n}","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback: any = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React from 'react';\nimport Tetris from './components/Tetris';\n\nconst App = () => (\n  <div className=\"App\">\n    <Tetris />\n  </div>\n)\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/bg.2810fe6b.png\";"],"sourceRoot":""}